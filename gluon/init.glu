let {
    datetime = datetime @ { DateTime, ? },
    duration = duration @ { Duration, ? },
    timezone,
} = import! time
let { read_line, println, print, eprintln, throw, flush_stdout, ? } = import! std.io
let { cmd, value_of, values_of } = import! sched.cmd.prim
let { map } = import! std.functor
let string @ { trim } = import! std.string
let { (>>=) } = import! std.monad
let { (<>) } = import! std.semigroup
let sched @ { Repeated } = import! sched.base.prim
let int = import! std.int
let { Result, unwrap_ok } = import! std.result
let { unwrap, unwrap_or } = import! std.option
let { log = { Log, ? }, map = { Map, ? }, obj = { Object, ? }, json = { Value, ? },
    join,
    split,
    arr_to_map,
} = import! util
let { wrap } = import! std.applicative
let { (<|), (|>), flip } = import! std.function
let { min, max } = import! std.cmp
let ser @ { ? } = import! std.json.ser
let de @ { ? } = import! std.json.de
let std_map = import! std.map
let stream @ { ? } = import! std.stream
let { for } = import! std.traversable
let { foldl } = import! std.foldable
let list @ { List, ? } = import! std.list
let tui = import! sched.tui
let { print_list } = import! list
let array = import! std.array

type Stop = 
    | Nonstop
    | Stopped
    | Count Int
    | After DateTime

type Every =
    | Time Duration
    | Month Int

type OptRepeated =
    | Single DateTime
    | Repeat Repeated

#[derive(Show)]
type Error =
    | Deadlock
    | Regex String
    | InvalidLogID Int
    | InvalidObjID Int
    | ObjNotTask Int
    | ObjNotEvent Int

seq cmd "list"
    "<type>     'Object/Logs to list'
     [limit]    'Number of objects/logs to list. Default 10'"
    (\m ->
        let limit = unwrap_or 10 <| map (\l -> unwrap_ok <| int.parse l) <| value_of m "limit"
        match unwrap <| value_of m "type" with 
        | "log" ->
            let logs = unwrap_ok <| sched.log.find (\l -> True) (Some limit)
            let logs = flip map (list.of logs) (\l ->
                [
                    (tui.fg tui.green <> tui.bold, False, Cons (show l.id) Nil),
                    ("", True, Cons l.typ Nil),
                    ("", True, Cons (show (datetime.to_local l.time)) Nil),
                    (tui.fg tui.blue, True, map (\p -> p.key <> ": " <> unwrap_ok (ser.to_string p.value)) (std_map.to_list l.attrs)),
                ])
            print_list (tui.fg tui.white <> tui.bold) ["id", "type", "time", "attrs"] logs

        | "obj" ->
            let objs = unwrap_ok <| sched.obj.find (\o -> True) (Some limit)
            let objs = flip map (list.of objs) (\o ->
                [
                    (tui.fg tui.green <> tui.bold, False, Cons (show o.id) Nil),
                    ("", True, Cons o.name Nil),
                    ("", True, Cons o.typ Nil),
                    (tui.fg tui.blue, True, map (\p -> p.key <> ": " <> unwrap_ok (ser.to_string p.value)) (std_map.to_list o.attrs)),
                ])
            print_list (tui.fg tui.white <> tui.bold) ["id", "name", "type", "attrs"] objs
        | "task" ->
            let tasks = unwrap_ok <| sched.obj.find (\t -> t.typ == "task") (Some limit)
            let tasks = flip map (list.of tasks) (\t ->
                let task = unwrap_ok <| sched.task.get t.id
                let current = unwrap_ok <| sched.task.find_current t.id
                let (current, deadline) =
                    match current with
                    | Some c ->
                        let log = unwrap_ok <| sched.log.get c
                        let raw = unwrap <| std_map.find "deadline" log.attrs
                        (show c, show <| datetime.from_timestamp <| unwrap_ok <| de.run raw)
                    | None -> ("none", "")
                [
                    (tui.fg tui.green <> tui.bold, False, Cons (show t.id) Nil),
                    ("", True, Cons t.name Nil),
                    ("", True, Cons task.task_typ Nil),
                    (tui.fg tui.yellow, False, Cons (show task.priority) Nil),
                    ("", True, Cons current Nil),
                    (tui.fg tui.yellow, True, Cons deadline Nil),
                    (tui.fg tui.blue, True, map (\p -> p.key <> ": " <> unwrap_ok (ser.to_string p.value)) (std_map.to_list t.attrs)),
                ])
            print_list (tui.fg tui.white <> tui.bold) ["id", "name", "type", "priority", "current", "deadline", "attrs"] tasks
        | _ -> println "else")

seq cmd "log"
    "<type>     'Type for the log'
     -a --attr [key] [val]... 'Optional attributes'"
    (\m ->
        let typ = unwrap (value_of m "type")
        let attrs = arr_to_map (values_of m "attr")
        let log_id = unwrap_ok (sched.log.new typ attrs)
        seq println (show log_id)
        wrap ())

seq cmd "stat" ""
    (\_ ->
        println "Sleep times:"
        let print_sleep_stat id num : Option Int -> Int -> IO () =
            if num == 0 then
                wrap ()
            else
                let ends =
                    let find_func =
                        match id with
                        | Some id -> sched.log.find_from id
                        | None -> sched.log.find
                    unwrap_ok <| find_func (\l -> l.typ == "bio.sleep.from-bed") (Some 1)
                if array.len ends == 0 then
                    wrap ()
                else
                    let end = array.index ends 0
                    let start = array.index (unwrap_ok <| sched.log.find_from end.id (\l -> l.typ == "bio.sleep.to-bed") (Some 1)) 0
                    let start_time = datetime.to_local start.time
                    let end_time = datetime.to_local end.time
                    seq println ("Start: " ++ show start_time ++ ", end: " ++ show end_time ++ ", length: " ++ show (datetime.sub end_time start_time))
                    print_sleep_stat (Some (start.id + 1)) (num - 1)
        print_sleep_stat None 7
        wrap ())

seq cmd "task" ""
    (\_ ->
        seq print "Name: "
        seq flush_stdout
        do name = map trim read_line
        seq print "Type: "
        seq flush_stdout
        do typ = map trim read_line
        seq print "Repeat: "
        seq flush_stdout
        do repeated = map (\s -> string.contains s "y") read_line
        do deadline : OptRepeated =
            if repeated then
                let read_times times : Array DateTime -> IO (Array DateTime) =
                    seq print "> "
                    seq flush_stdout
                    do line = map trim read_line
                    if string.is_empty line then
                        wrap times
                    else
                        match datetime.parse line with
                        | Ok time -> read_times (times <> [time])
                        | Err e ->
                            seq eprintln ("Error parsing time: " ++ e)
                            read_times times
                seq println "Times: "
                do times = read_times []
                seq print "Period: "
                seq flush_stdout
                do period_secs = map trim read_line >>= \period_secs ->
                    match int.parse period_secs with
                    | Ok secs -> wrap secs
                    | Err e -> throw "period parsing"
                seq print "Stop: "
                seq flush_stdout
                do stop_time = map trim read_line >>= \stop_time ->
                    match datetime.parse stop_time with
                    | Ok time -> wrap time
                    | Err e -> throw e
                let repeat : Repeated = sched.repeat times (Time (duration.seconds period_secs)) (After stop_time)
                wrap (Repeat repeat)
            else
                seq print "Time: "
                seq flush_stdout
                do time = map trim read_line
                match datetime.parse time with
                | Ok time -> wrap (Single time)
                | Err e -> throw e
        seq print "Priority: "
        seq flush_stdout
        do priority = map trim read_line >>= \priority ->
            match int.parse priority with
            | Ok priority -> wrap priority
            | Err e -> throw "priority parsing"
        match sched.task.new name typ deadline priority with
        | Ok id -> println (show id)
        | Err e ->
            let _e : Error = e
            println (show _e))

cmd "finish" "<id>       'Task (log) id to finish'"
    (\m ->
        let id = value_of m "id" |> unwrap |> int.parse |> unwrap_ok
        let _ = sched.task.finish id |> unwrap_ok
        wrap ())
